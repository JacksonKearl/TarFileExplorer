var TarUtils = (function (exports) {
    'use strict';

    class ByteStream {
        constructor(bytes) {
            this.bytes = bytes;
            this.byteIndexCurrent = 0;
        }
        hasMoreBytes() {
            return this.byteIndexCurrent < this.bytes.length;
        }
        readBytes(numberOfBytesToRead) {
            const start = this.byteIndexCurrent;
            this.byteIndexCurrent += numberOfBytesToRead;
            return this.bytes.slice(start, this.byteIndexCurrent);
        }
        readByte() {
            let returnValue = this.bytes[this.byteIndexCurrent];
            this.byteIndexCurrent++;
            return returnValue;
        }
        readString(lengthOfString) {
            let returnValue = '';
            for (let i = 0; i < lengthOfString; i++) {
                const byte = this.readByte();
                if (byte != 0) {
                    const byteAsChar = String.fromCharCode(byte);
                    returnValue += byteAsChar;
                }
            }
            return returnValue;
        }
    }

    const ChunkSize = 512;

    class TarFileTypeFlag {
        constructor(value, name) {
            this.value = value;
            this.id = '_' + this.value;
            this.name = name;
        }
        static Instances() {
            if (TarFileTypeFlag._instances == null) {
                TarFileTypeFlag._instances = new TarFileTypeFlag_Instances();
            }
            return TarFileTypeFlag._instances;
        }
    }
    class TarFileTypeFlag_Instances {
        constructor() {
            this.Normal = new TarFileTypeFlag('0', 'Normal');
            this.HardLink = new TarFileTypeFlag('1', 'Hard Link');
            this.SymbolicLink = new TarFileTypeFlag('2', 'Symbolic Link');
            this.CharacterSpecial = new TarFileTypeFlag('3', 'Character Special');
            this.BlockSpecial = new TarFileTypeFlag('4', 'Block Special');
            this.Directory = new TarFileTypeFlag('5', 'Directory');
            this.FIFO = new TarFileTypeFlag('6', 'FIFO');
            this.ContiguousFile = new TarFileTypeFlag('7', 'Contiguous File');
            this.LongFilePath = new TarFileTypeFlag('L', '././@LongLink');
            this._All = [
                this.Normal,
                this.HardLink,
                this.SymbolicLink,
                this.CharacterSpecial,
                this.BlockSpecial,
                this.Directory,
                this.FIFO,
                this.ContiguousFile,
                this.LongFilePath,
            ];
            for (let i = 0; i < this._All.length; i++) {
                const item = this._All[i];
                this._All[item.id] = item;
            }
        }
    }

    class TarFileEntryHeader {
        constructor(fileName, fileMode, userIDOfOwner, userIDOfGroup, fileSizeInBytes, timeModifiedInUnixFormat, checksum, typeFlag, nameOfLinkedFile, uStarIndicator, uStarVersion, userNameOfOwner, groupNameOfOwner, deviceNumberMajor, deviceNumberMinor, filenamePrefix) {
            this.fileName = fileName;
            this.fileMode = fileMode;
            this.userIDOfOwner = userIDOfOwner;
            this.userIDOfGroup = userIDOfGroup;
            this.fileSizeInBytes = fileSizeInBytes;
            this.timeModifiedInUnixFormat = timeModifiedInUnixFormat;
            this.checksum = checksum;
            this.typeFlag = typeFlag;
            this.nameOfLinkedFile = nameOfLinkedFile;
            this.uStarIndicator = uStarIndicator;
            this.uStarVersion = uStarVersion;
            this.userNameOfOwner = userNameOfOwner;
            this.groupNameOfOwner = groupNameOfOwner;
            this.deviceNumberMajor = deviceNumberMajor;
            this.deviceNumberMinor = deviceNumberMinor;
            this.filenamePrefix = filenamePrefix;
        }
        static fromBytes(bytes) {
            const reader = new ByteStream(bytes);
            const fileName = reader.readString(100).trim();
            const fileMode = reader.readString(8);
            const userIDOfOwner = reader.readString(8);
            const userIDOfGroup = reader.readString(8);
            const fileSizeInBytesAsStringOctal = reader.readString(12);
            const timeModifiedInUnixFormat = reader.readBytes(12);
            const checksumAsStringOctal = reader.readString(8);
            const typeFlagValue = reader.readString(1);
            const nameOfLinkedFile = reader.readString(100);
            const uStarIndicator = reader.readString(6);
            const uStarVersion = reader.readString(2);
            const userNameOfOwner = reader.readString(32);
            const groupNameOfOwner = reader.readString(32);
            const deviceNumberMajor = reader.readString(8);
            const deviceNumberMinor = reader.readString(8);
            const filenamePrefix = reader.readString(155);
            const reserved = reader.readBytes(12);
            const fileSizeInBytes = parseInt(fileSizeInBytesAsStringOctal.trim(), 8);
            const checksum = parseInt(checksumAsStringOctal, 8);
            const typeFlags = TarFileTypeFlag.Instances()._All;
            const typeFlagID = '_' + typeFlagValue;
            const typeFlag = typeFlags[typeFlagID];
            let returnValue = new TarFileEntryHeader(fileName, fileMode, userIDOfOwner, userIDOfGroup, fileSizeInBytes, timeModifiedInUnixFormat, checksum, typeFlag, nameOfLinkedFile, uStarIndicator, uStarVersion, userNameOfOwner, groupNameOfOwner, deviceNumberMajor, deviceNumberMinor, filenamePrefix);
            return returnValue;
        }
    }

    class TarFileEntry {
        constructor(header, dataAsBytes) {
            this.header = header;
            this.dataAsBytes = dataAsBytes;
        }
        static fromBytes(chunkAsBytes, reader) {
            const chunkSize = ChunkSize;
            const header = TarFileEntryHeader.fromBytes(chunkAsBytes);
            const sizeOfDataEntryInBytesUnpadded = header.fileSizeInBytes;
            const numberOfChunksOccupiedByDataEntry = Math.ceil(sizeOfDataEntryInBytesUnpadded / chunkSize);
            const sizeOfDataEntryInBytesPadded = numberOfChunksOccupiedByDataEntry * chunkSize;
            const dataAsBytes = reader
                .readBytes(sizeOfDataEntryInBytesPadded)
                .slice(0, sizeOfDataEntryInBytesUnpadded);
            const entry = new TarFileEntry(header, dataAsBytes);
            return entry;
        }
    }

    class TarFile {
        constructor(entries) {
            this.entries = entries;
        }
        static fromBytes(bytes) {
            const reader = new ByteStream(bytes);
            const entries = [];
            const chunkSize = ChunkSize;
            let numberOfConsecutiveZeroChunks = 0;
            while (reader.hasMoreBytes() == true) {
                const chunkAsBytes = reader.readBytes(chunkSize);
                let areAllBytesInChunkZeroes = true;
                for (let b = 0; b < chunkAsBytes.length; b++) {
                    if (chunkAsBytes[b] != 0) {
                        areAllBytesInChunkZeroes = false;
                        break;
                    }
                }
                if (areAllBytesInChunkZeroes == true) {
                    numberOfConsecutiveZeroChunks++;
                    if (numberOfConsecutiveZeroChunks == 2) {
                        break;
                    }
                }
                else {
                    numberOfConsecutiveZeroChunks = 0;
                    const entry = TarFileEntry.fromBytes(chunkAsBytes, reader);
                    entries.push(entry);
                }
            }
            let returnValue = new TarFile(entries);
            returnValue.consolidateLongPathEntries();
            return returnValue;
        }
        consolidateLongPathEntries() {
            var _a;
            const typeFlagLongPathName = TarFileTypeFlag.Instances().LongFilePath.name;
            const entries = this.entries;
            for (let i = 0; i < entries.length; i++) {
                const entry = entries[i];
                if (((_a = entry.header.typeFlag) === null || _a === void 0 ? void 0 : _a.name) == typeFlagLongPathName) {
                    const entryNext = entries[i + 1];
                    entryNext.header.fileName = entry.dataAsBytes.reduce((a, b) => (a += String.fromCharCode(b)), '');
                    entryNext.header.fileName = entryNext.header.fileName.replace(/\0/g, '');
                    entries.splice(i, 1);
                    i--;
                }
            }
        }
    }

    const readTar = (tarball) => TarFile.fromBytes(tarball);

    exports.readTar = readTar;

    return exports;

}({}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
