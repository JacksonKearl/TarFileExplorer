var TarUtils = (function (exports) {
    'use strict';

    class ByteStream {
        constructor(bytes) {
            this.bytes = bytes;
            this.byteIndexCurrent = 0;
        }
        // instance methods
        hasMoreBytes() {
            return this.byteIndexCurrent < this.bytes.length;
        }
        readBytes(numberOfBytesToRead) {
            const start = this.byteIndexCurrent;
            this.byteIndexCurrent += numberOfBytesToRead;
            return this.bytes.slice(start, this.byteIndexCurrent);
        }
        readByte() {
            let returnValue = this.bytes[this.byteIndexCurrent];
            this.byteIndexCurrent++;
            return returnValue;
        }
        readString(lengthOfString) {
            let returnValue = '';
            for (let i = 0; i < lengthOfString; i++) {
                const byte = this.readByte();
                if (byte != 0) {
                    const byteAsChar = String.fromCharCode(byte);
                    returnValue += byteAsChar;
                }
            }
            return returnValue;
        }
    }

    class TarFileTypeFlag {
        constructor(value, name) {
            this.value = value;
            this.id = '_' + this.value;
            this.name = name;
        }
        static Instances() {
            if (TarFileTypeFlag._instances == null) {
                TarFileTypeFlag._instances = new TarFileTypeFlag_Instances();
            }
            return TarFileTypeFlag._instances;
        }
    }
    class TarFileTypeFlag_Instances {
        constructor() {
            this.Normal = new TarFileTypeFlag('0', 'Normal');
            this.HardLink = new TarFileTypeFlag('1', 'Hard Link');
            this.SymbolicLink = new TarFileTypeFlag('2', 'Symbolic Link');
            this.CharacterSpecial = new TarFileTypeFlag('3', 'Character Special');
            this.BlockSpecial = new TarFileTypeFlag('4', 'Block Special');
            this.Directory = new TarFileTypeFlag('5', 'Directory');
            this.FIFO = new TarFileTypeFlag('6', 'FIFO');
            this.ContiguousFile = new TarFileTypeFlag('7', 'Contiguous File');
            this.LongFilePath = new TarFileTypeFlag('L', '././@LongLink');
            // Additional types not implemented:
            // 'g' - global extended header with meta data (POSIX.1-2001)
            // 'x' - extended header with meta data for the next file in the archive (POSIX.1-2001)
            // 'A'-'Z' - Vendor specific extensions (POSIX.1-1988)
            // [other values] - reserved for future standardization
            this._All = [
                this.Normal,
                this.HardLink,
                this.SymbolicLink,
                this.CharacterSpecial,
                this.BlockSpecial,
                this.Directory,
                this.FIFO,
                this.ContiguousFile,
                this.LongFilePath,
            ];
            for (let i = 0; i < this._All.length; i++) {
                const item = this._All[i];
                this._All[item.id] = item;
            }
        }
    }

    class TarFileEntryHeader {
        constructor(fileName, fileMode, userIDOfOwner, userIDOfGroup, fileSizeInBytes, timeModifiedInUnixFormat, checksum, typeFlag, nameOfLinkedFile, uStarIndicator, uStarVersion, userNameOfOwner, groupNameOfOwner, deviceNumberMajor, deviceNumberMinor, filenamePrefix) {
            this.fileName = fileName;
            this.fileMode = fileMode;
            this.userIDOfOwner = userIDOfOwner;
            this.userIDOfGroup = userIDOfGroup;
            this.fileSizeInBytes = fileSizeInBytes;
            this.timeModifiedInUnixFormat = timeModifiedInUnixFormat;
            this.checksum = checksum;
            this.typeFlag = typeFlag;
            this.nameOfLinkedFile = nameOfLinkedFile;
            this.uStarIndicator = uStarIndicator;
            this.uStarVersion = uStarVersion;
            this.userNameOfOwner = userNameOfOwner;
            this.groupNameOfOwner = groupNameOfOwner;
            this.deviceNumberMajor = deviceNumberMajor;
            this.deviceNumberMinor = deviceNumberMinor;
            this.filenamePrefix = filenamePrefix;
        }
        // static methods
        // static default() {
        // 	const now = +new Date()
        // 	const unixEpoch = +new Date(1970, 1, 1)
        // 	const millisecondsSinceUnixEpoch = now - unixEpoch
        // 	const secondsSinceUnixEpoch = Math.floor(millisecondsSinceUnixEpoch / 1000)
        // 	const secondsSinceUnixEpochAsStringOctal = padRight(secondsSinceUnixEpoch.toString(8), 12, '\0')
        // 	const timeModifiedInUnixFormat: number[] = []
        // 	for (let i = 0; i < secondsSinceUnixEpochAsStringOctal.length; i++) {
        // 		const digitAsASCIICode = secondsSinceUnixEpochAsStringOctal.charCodeAt(i)
        // 		timeModifiedInUnixFormat.push(digitAsASCIICode)
        // 	}
        // 	let returnValue = new TarFileEntryHeader(
        // 		padRight('', 100, '\0'), // fileName
        // 		'0100777', // fileMode
        // 		'0000000', // userIDOfOwner
        // 		'0000000', // userIDOfGroup
        // 		0, // fileSizeInBytes
        // 		timeModifiedInUnixFormat,
        // 		0, // checksum
        // 		TarFileTypeFlag.Instances().Normal,
        // 		'', // nameOfLinkedFile,
        // 		'ustar', // uStarIndicator,
        // 		'00', // uStarVersion,
        // 		'', // userNameOfOwner,
        // 		'', // groupNameOfOwner,
        // 		'', // deviceNumberMajor,
        // 		'', // deviceNumberMinor,
        // 		'', // filenamePrefix
        // 	)
        // 	return returnValue
        // }
        // static directoryNew(directoryName: any) {
        // 	const header = TarFileEntryHeader.default()
        // 	header.fileName = directoryName
        // 	header.typeFlag = TarFileTypeFlag.Instances().Directory
        // 	header.fileSizeInBytes = 0
        // 	header.checksumCalculate()
        // 	return header
        // }
        // static fileNew(fileName: any, fileContentsAsBytes: string | any[]) {
        // 	const header = TarFileEntryHeader.default()
        // 	header.fileName = fileName
        // 	header.typeFlag = TarFileTypeFlag.Instances().Normal
        // 	header.fileSizeInBytes = fileContentsAsBytes.length
        // 	header.checksumCalculate()
        // 	return header
        // }
        static fromBytes(bytes) {
            const reader = new ByteStream(bytes);
            const fileName = reader.readString(100).trim();
            const fileMode = reader.readString(8);
            const userIDOfOwner = reader.readString(8);
            const userIDOfGroup = reader.readString(8);
            const fileSizeInBytesAsStringOctal = reader.readString(12);
            const timeModifiedInUnixFormat = reader.readBytes(12);
            const checksumAsStringOctal = reader.readString(8);
            const typeFlagValue = reader.readString(1);
            const nameOfLinkedFile = reader.readString(100);
            const uStarIndicator = reader.readString(6);
            const uStarVersion = reader.readString(2);
            const userNameOfOwner = reader.readString(32);
            const groupNameOfOwner = reader.readString(32);
            const deviceNumberMajor = reader.readString(8);
            const deviceNumberMinor = reader.readString(8);
            const filenamePrefix = reader.readString(155);
            const reserved = reader.readBytes(12);
            const fileSizeInBytes = parseInt(fileSizeInBytesAsStringOctal.trim(), 8);
            const checksum = parseInt(checksumAsStringOctal, 8);
            const typeFlags = TarFileTypeFlag.Instances()._All;
            const typeFlagID = '_' + typeFlagValue;
            const typeFlag = typeFlags[typeFlagID];
            let returnValue = new TarFileEntryHeader(fileName, fileMode, userIDOfOwner, userIDOfGroup, fileSizeInBytes, timeModifiedInUnixFormat, checksum, typeFlag, nameOfLinkedFile, uStarIndicator, uStarVersion, userNameOfOwner, groupNameOfOwner, deviceNumberMajor, deviceNumberMinor, filenamePrefix);
            return returnValue;
        }
    }
    TarFileEntryHeader.FileNameMaxLength = 99;
    TarFileEntryHeader.SizeInBytes = 500;

    class TarFileEntry {
        constructor(header, dataAsBytes) {
            this.header = header;
            this.dataAsBytes = dataAsBytes;
        }
        // methods
        // static methods
        // static directoryNew(directoryName: any) {
        // 	const header = TarFileEntryHeader.directoryNew(directoryName)
        // 	const entry = new TarFileEntry(header, [])
        // 	return entry
        // }
        // static fileNew(fileName: string, fileContentsAsBytes: number[]) {
        // 	const header = TarFileEntryHeader.fileNew(fileName, fileContentsAsBytes)
        // 	const entry = new TarFileEntry(header, fileContentsAsBytes)
        // 	return entry
        // }
        static fromBytes(chunkAsBytes, reader) {
            const chunkSize = TarFile.ChunkSize;
            const header = TarFileEntryHeader.fromBytes(chunkAsBytes);
            const sizeOfDataEntryInBytesUnpadded = header.fileSizeInBytes;
            const numberOfChunksOccupiedByDataEntry = Math.ceil(sizeOfDataEntryInBytesUnpadded / chunkSize);
            const sizeOfDataEntryInBytesPadded = numberOfChunksOccupiedByDataEntry * chunkSize;
            const dataAsBytes = reader
                .readBytes(sizeOfDataEntryInBytesPadded)
                .slice(0, sizeOfDataEntryInBytesUnpadded);
            const entry = new TarFileEntry(header, dataAsBytes);
            return entry;
        }
    }

    class TarFile {
        constructor(entries) {
            this.entries = entries;
        }
        // static methods
        static fromBytes(bytes) {
            const reader = new ByteStream(bytes);
            const entries = [];
            const chunkSize = TarFile.ChunkSize;
            let numberOfConsecutiveZeroChunks = 0;
            while (reader.hasMoreBytes() == true) {
                const chunkAsBytes = reader.readBytes(chunkSize);
                let areAllBytesInChunkZeroes = true;
                for (let b = 0; b < chunkAsBytes.length; b++) {
                    if (chunkAsBytes[b] != 0) {
                        areAllBytesInChunkZeroes = false;
                        break;
                    }
                }
                if (areAllBytesInChunkZeroes == true) {
                    numberOfConsecutiveZeroChunks++;
                    if (numberOfConsecutiveZeroChunks == 2) {
                        break;
                    }
                }
                else {
                    numberOfConsecutiveZeroChunks = 0;
                    const entry = TarFileEntry.fromBytes(chunkAsBytes, reader);
                    entries.push(entry);
                }
            }
            let returnValue = new TarFile(entries);
            returnValue.consolidateLongPathEntries();
            return returnValue;
        }
        // static create(fileName: any) {
        // 	return new TarFile(
        // 		[], // entries
        // 	)
        // }
        // instance methods
        consolidateLongPathEntries() {
            var _a;
            // TAR file entries with paths longer than 99 chars require cheating,
            // by prepending them with a entry of type "L" whose data contains the path.
            const typeFlagLongPathName = TarFileTypeFlag.Instances().LongFilePath.name;
            const entries = this.entries;
            for (let i = 0; i < entries.length; i++) {
                const entry = entries[i];
                if (((_a = entry.header.typeFlag) === null || _a === void 0 ? void 0 : _a.name) == typeFlagLongPathName) {
                    const entryNext = entries[i + 1];
                    entryNext.header.fileName = entry.dataAsBytes.reduce((a, b) => (a += String.fromCharCode(b)), '');
                    //Drop all null terminating character
                    entryNext.header.fileName = entryNext.header.fileName.replace(/\0/g, '');
                    entries.splice(i, 1);
                    i--;
                }
            }
        }
    }
    // constants
    TarFile.ChunkSize = 512;

    exports.TarFile = TarFile;

    return exports;

}({}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
